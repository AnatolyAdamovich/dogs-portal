1) ДОБАВЛЕНИЕ PROXY В ФАЙЛ PACKAGE.JSON

   При получении запроса, React обрабатывает их,
   как запрос к статическим файлам. Но можно заставить React
   проксировать запрос к серверу с помощью proxy.
   В proxy мы запишем URL, куда будут направляться
   запросы, которые НЕ ОТНОСЯТСЯ к frontend части

   По умолчанию будут даваться React-скрипты, но если
   обращение к серверу, то с помощью proxy мы перенаправляем
   запрос на сервер

   там, на 4000 порту, будет служить сервер

2) "dependencies" - зависимости проекта, которые работают в тот момент, когда проект уже в продакшене(express, bootstrap и т.д.)
"DEVdependencies" - зависимости проекта, которые работают только на момент разработки (nodemon, npm-run-all)

3) В скрипты добавили "dev": "run-p ...". Это позволяет во время разработки
запускать сразу два приложения: фронт часть и серверную часть
(параллельно будут работать две задачи)


4) Добавим пользователя
CREATE DATABASE dogs_portal;
CREATE USER 'dogsPortal_user'@'localhost' identified with mysql_native_password by '0dogsapp9';
(создали пользователя базы данных для того, чтобы можно было "удаленно" подключаться к нашей БД
причем мы определили способ идентификации через mysql_native_password)
(сделать проверку можно командой: SELECT user FROM mysql.user;)
Далее пользователю нужно дать привилегии. Пока что дадим все привилегии, затем, когда будут определены роли,
переопределим пользователей:
GRANT ALL ON dogs_portal.* to 'dogsPortal_user'@'localhost';

flush privileges; - обновить все привилегии

Посмотрим права пользователя, которые мы определили:
SHOW GRANTS FOR 'dogsPortal_user'@'localhost';

Созданные пользователь должен иметь полные права доступа
к базе данных нашего сайта.

5) npx sequelize init
Создаются папки config, models, migrations

в сonfig прописывается пользователь, который исп. БД
models - абстракции, представленные как таблицы в БД
с помощью sequelize можем использовать ЯП для управления базой данных

